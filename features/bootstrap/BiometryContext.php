<?php
use Behat\Behat\Context\ClosuredContextInterface, Behat\Behat\Context\TranslatedContextInterface, Behat\Behat\Context\BehatContext, Behat\Behat\Exception\PendingException;
use Behat\Gherkin\Node\PyStringNode, Behat\Gherkin\Node\TableNode;
use Behat\MinkExtension\Context\MinkContext;

use Behat\Mink\Driver\Selenium2Driver;
use \SensioLabs\Behat\PageObjectExtension\Context\PageObjectContext;
use WebDriver\WebDriver;
class BiometryContext extends PageObjectContext
{
    public function __construct(array $parameters)
    {
    }

    /**
     * @Then /^I Save the Biometry$/
     */
    public function iSaveTheBiometry() {
        /**
         *
         * @var Biometry $biometry
         */
        $biometry = $this->getPage ( 'Biometry' );
        $biometry->saveBiometry();
    }


    /**
     * @Then /^I Check that no lenstype selection is not showing any error$/
     */
    public function iCheckThatNoLenstypeSelectionIsNotShowingAnyError()
    {
        /**
         *
         * @var Biometry $biometry
         */
        $biometry = $this->getPage('Biometry');
        $biometry->noLensErrorConfirm();
    }

    /**
     * @Then /^I Check that lenstype is not selected by default$/
     */
    public function iCheckThatLenstypeIsNotSelectedByDefault()
    {
        /**
         *
         * @var Biometry $biometry
         */
        $biometry = $this->getPage('Biometry');
        $biometry->noLensByDefaultConfirm();
    }

    /**
     * @Then /^I verify that the event is auto generated from DICOM files$/
     */
    public function iVerifyEventIsAutoGeneratedFromDicom(){
        /**
         *
         * @var Biometry $biometry
         */
        $biometry = $this->getPage('Biometry');
        $biometry->verifyEventIsAuto();
    }

    /**
     * @Then /^I select a auto generated biometry event$/
     */
    public function iSelectAutoBiometryEvent(){
        /**
         *
         * @var Biometry $biometry
         */
        $biometry = $this->getPage('Biometry');
        $biometry->selectAutoBiometryEvent();
    }

    /**
     * @Then /^I select a auto generated biometry event with "([^"]*)"$/
     */
    public function iSelectAutoBiometryEventDateTime($dateTime){
        /**
         *
         * @var Biometry $biometry
         */
        $biometry = $this->getPage('Biometry');
        $biometry->selectAutoBiometryEventByDateTime($dateTime);
    }

    /**
     * @Then /^I select the "([^"]*)" on event summary page$/
     */
    public function iSelectTabOnEventSummaryPage($eventTab){
        /**
         *
         * @var Biometry $biometry
         */
        $biometry = $this->getPage('Biometry');
        $biometry->selectTabOnEventSummaryPage($eventTab);
    }

    /**
     * @Then /^I look for "([^"]*)" in the "([^"]*)" biometry event "([^"]*)"$/
     */
    public function iLookDataInBiometryPage($value,$eyeSide,$tabType){
        /**
         *
         * @var Biometry $biometry
         */
        $biometry = $this->getPage('Biometry');
        $biometry->lookDataInBiometryPage($value,$eyeSide,$tabType);
    }


    /**
     * @Then /^I look for "([^"]*)" on event summary page$/
     */

    public function iLookForEventSummaryInfoAlert($infoAlert){
        /**
         *
         * @var Biometry $biometry
         */
        $biometry = $this->getPage('Biometry');
        $biometry->lookForEventSummaryInfoAlert($infoAlert);
    }

    /**
     * @Then /^I check for "([^"]*)" in Lens dropdown for "([^"]*)"$/
     */

    public function iCheckLensDropDown($lensType,$eyeSide){
        /**
         *
         * @var Biometry $biometry
         */
        $biometry = $this->getPage('Biometry');
        $biometry->checkLensDropDown($lensType,$eyeSide);
    }

    /**
     * @Then /^I check for "([^"]*)" in formula dropdown for "([^"]*)"$/
     */

    public function iCheckFormulaDropDown($formula,$eyeSide){
        /**
         *
         * @var Biometry $biometry
         */
        $biometry = $this->getPage('Biometry');
        $biometry->checkFormulaDropDown($formula,$eyeSide);
    }

    /**
     * @Then /^I should see measurements not recorded for "([^"]*)" in "([^"]*)"$/
     */

    public function iSeeMeasurementsNotRecorded($eyeSide,$tabType){
        /**
         *
         * @var Biometry $biometry
         */
        $biometry = $this->getPage('Biometry');
        $biometry->checkMeasurementsNotRecorded($eyeSide,$tabType);
    }

    /**
     * @Then /^I should see no lens recorded for "([^"]*)"$/
     */

    public function iSeeLensNotRecorded($eyeSide){
        /**
         *
         * @var Biometry $biometry
         */
        $biometry = $this->getPage('Biometry');
        $biometry->checkLensNotRecorded($eyeSide);
    }

    /**
     * @Then /^I should see no formula recorded for "([^"]*)"$/
     */

    public function iSeeFormulaNotRecorded($eyeSide){
        /**
         *
         * @var Biometry $biometry
         */
        $biometry = $this->getPage('Biometry');
        $biometry->checkFormulaNotRecorded($eyeSide);
    }

    /**
     * @Then /^I cancel the event creation$/
     */
    public function iCancelTheEventCreation(){
        /**
         *
         * @var Biometry $biometry
         */
        $biometry = $this->getPage('Biometry');
        $biometry->cancelEventCreation();
    }

}
