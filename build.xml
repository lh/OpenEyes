<?xml version="1.0" encoding="UTF-8"?>
<project name="OpenEyes" default="build">
    <property name="toolsdir" value="${basedir}/bin/"/>
    <property name="prefer" value="dist"/>
    <property name="MYSQLDRIVER" value="/usr/share/java/mysql-connector-java.jar"/>
    <property environment="env"/>

    <path id="CLASSPATH">
        <pathelement location="${MYSQLDRIVER}"/>
    </path>

    <property name="DATABASE_TEST_NAME" value="${env.DATABASE_TEST_NAME}"/>
    <property name="DATABASE_TEST_HOST" value="${env.DATABASE_TEST_HOST}"/>
    <property name="DATABASE_TEST_PORT" value="${env.DATABASE_TEST_PORT}"/>
    <property name="DATABASE_TEST_USER" value="${env.DATABASE_TEST_USER}"/>
    <property name="DATABASE_TEST_PASS" value="${env.DATABASE_TEST_PASS}"/>

    <!-- Uncomment the following when the tools are in ${basedir}/vendor/bin -->
    <!-- <property name="toolsdir" value="${basedir}/vendor/bin/"/> -->

    <target name="build"
            depends="prepare,composer,npm,bower,grunt,database-populate,migrate,migrate-modules,lint,mocha,phploc-ci,pdepend,phpmd-ci,phpcs-ci,phpcpd-ci,phpunit"
            description=""/>

    <target name="build-parallel"
            depends="prepare,composer,npm,bower,grunt,migrate,migrate-modules,lint,tools-parallel,phpunit"
            description=""/>

    <target name="develop"
            depends="prepare,composer,npm,bower,grunt,migrate,migrate-modules"
            description=""/>

    <target name="run-tests"
            depends="prepare,composer,npm,bower,grunt,database-populate,migrate,migrate-modules,lint,mocha,phpunit"
            description="" />

    <target name="tools-parallel" description="Run tools in parallel">
        <parallel threadCount="2">
            <sequential>
                <antcall target="pdepend"/>
                <antcall target="phpmd-ci"/>
            </sequential>
            <antcall target="phpcpd-ci"/>
            <antcall target="phpcs-ci"/>
            <antcall target="phploc-ci"/>
        </parallel>
    </target>

    <target name="clean"
            unless="clean.done"
            description="Cleanup build artifacts">
        <delete dir="${basedir}/build/api"/>
        <delete dir="${basedir}/build/coverage"/>
        <delete dir="${basedir}/build/pdepend"/>
        <delete dir="${basedir}/build/phpdox"/>
        <delete dir="${basedir}/protected/runtime"/>
        <delete dir="${basedir}/cache"/>
        <delete dir="${basedir}/protected/cache"/>

        <property name="clean.done" value="true"/>
    </target>

    <target name="prepare"
            unless="prepare.done"
            depends="clean"
            description="Prepare for build">
        <mkdir dir="${basedir}/build/api"/>
        <mkdir dir="${basedir}/build/coverage"/>
        <mkdir dir="${basedir}/build/logs"/>
        <mkdir dir="${basedir}/build/pdepend"/>
        <mkdir dir="${basedir}/build/phpdox"/>
        <mkdir dir="${basedir}/protected/runtime"/>
        <mkdir dir="${basedir}/protected/runtime/cache"/>
        <mkdir dir="${basedir}/cache"/>
        <mkdir dir="${basedir}/protected/cache"/>
        <copy file="${basedir}/protected/config/local.sample/common.sample.php" tofile="${basedir}/protected/config/local/common.php" overwrite="false" />
        <copy file="${basedir}/protected/config/local.sample/test.php" tofile="${basedir}/protected/config/local/test.php" overwrite="false" />
        <copy file="${basedir}/protected/config/local.sample/console.sample.php" tofile="${basedir}/protected/config/local/console.php" overwrite="false" />
        <property name="prepare.done" value="true"/>
    </target>

    <target name="database-populate" description="Populates an existing MySQL / MariaDB database with the test database" depends="prepare">
        <sql driver="com.mysql.jdbc.Driver" url="jdbc:mysql://${DATABASE_TEST_HOST}:${DATABASE_TEST_PORT}/${DATABASE_TEST_NAME}" userid="${DATABASE_TEST_USER}" password="${DATABASE_TEST_PASS}" classpathref="CLASSPATH" onerror="continue">
            <transaction src="${basedir}/features/vagrant_openeyes.sql"/>
        </sql>
    </target>

    <target name="composer" description="Install composer packages">
        <exec executable="composer" failonerror="true">
            <arg value="install" />
            <arg value="--prefer-${prefer}" />
        </exec>
    </target>

    <target name="npm" description="Install npm packages">
        <exec executable="npm" failonerror="true">
            <arg value="install" />
        </exec>
    </target>

    <target name="bower" description="Install bower packages">
        <exec executable="bower" failonerror="true">
            <arg value="install" />
            <arg value="--config.interactive=false" />
        </exec>
    </target>

    <target name="grunt" description="Run grunt">
        <exec executable="grunt" failonerror="true" />
    </target>

    <target name="migrate" description="Run Yii migrations">
        <exec executable="php" failonerror="true">
            <arg value="${basedir}/protected/yiic" />
            <arg value="migrate" />
            <arg value="--interactive=0" />
            <arg value="--connectionID=testdb" />
        </exec>
    </target>

    <target name="migrate-modules" description="Run Yii migrations on modules">
        <exec executable="php" failonerror="true">
            <arg value="${basedir}/protected/yiic" />
            <arg value="migratemodules" />
            <arg value="--interactive=0" />
            <arg value="--connectionID=testdb" />
        </exec>
    </target>

    <target name="lint" description="Perform syntax check of sourcecode files">
        <apply executable="php" failonerror="true">
            <arg value="-l" />

            <fileset dir="${basedir}/protected">
                <include name="**/*.php" />
                <modified />
            </fileset>
        </apply>
    </target>

    <target name="phploc"
            description="Measure project size using PHPLOC and print human readable output. Intended for usage on the command line.">
        <exec executable="${toolsdir}phploc">
            <arg value="--count-tests" />
            <arg path="${basedir}/protected" />
        </exec>
    </target>

    <target name="phploc-ci"
            depends="prepare"
            description="Measure project size using PHPLOC and log result in CSV and XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${toolsdir}phploc">
            <arg value="--count-tests" />
            <arg value="--log-csv" />
            <arg path="${basedir}/build/logs/phploc.csv" />
            <arg value="--log-xml" />
            <arg path="${basedir}/build/logs/phploc.xml" />
            <arg path="${basedir}/protected" />
        </exec>
    </target>

    <target name="pdepend"
            depends="prepare"
            description="Calculate software metrics using PHP_Depend and log result in XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${toolsdir}pdepend">
            <arg value="--jdepend-xml=${basedir}/build/logs/jdepend.xml" />
            <arg value="--jdepend-chart=${basedir}/build/pdepend/dependencies.svg" />
            <arg value="--overview-pyramid=${basedir}/build/pdepend/overview-pyramid.svg" />
            <arg path="${basedir}/protected" />
        </exec>
    </target>

    <target name="phpmd"
            description="Perform project mess detection using PHPMD and print human readable output. Intended for usage on the command line before committing.">
        <exec executable="${toolsdir}phpmd">
            <arg path="${basedir}/protected" />
            <arg value="text" />
            <arg path="${basedir}/build/phpmd.xml" />
            <arg value="--exclude ${basedir}/protected/tests/*,${basedir}/protected/migrations/*,${basedir}/protected/yii/*,${basedir}/protected/runtime/*,${basedir}/vendor/*" />
        </exec>
    </target>

    <target name="phpmd-ci"
            depends="prepare"
            description="Perform project mess detection using PHPMD and log result in XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${toolsdir}phpmd">
            <arg path="${basedir}/protected" />
            <arg value="xml" />
            <arg path="${basedir}/build/phpmd.xml" />
            <arg value="--reportfile" />
            <arg path="${basedir}/build/logs/pmd.xml" />
            <arg value="--exclude ${basedir}/protected/tests/*,${basedir}/protected/migrations/*,${basedir}/protected/yii/*,${basedir}/protected/runtime/*,${basedir}/vendor/*,${basedir}/protected/vendor/*" />
        </exec>
    </target>

    <target name="phpcs"
            description="Find coding standard violations using PHP_CodeSniffer and print human readable output. Intended for usage on the command line before committing.">
        <exec executable="${toolsdir}phpcs">
            <arg value="--standard=${basedir}/build/ruleset.xml" />
            <arg value="--extensions=php" />
            <arg value="--ignore=autoload.php" />
            <arg path="${basedir}/protected" />
        </exec>
    </target>

    <target name="phpcs-ci"
            depends="prepare"
            description="Find coding standard violations using PHP_CodeSniffer and log result in XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${toolsdir}phpcs" output="/dev/null">
            <arg value="--report=checkstyle" />
            <arg value="--report-file=${basedir}/build/logs/checkstyle.xml" />
            <arg value="--standard=${basedir}/build/ruleset.xml" />
            <arg value="--extensions=php" />
            <arg value="--ignore=autoload.php" />
            <arg path="${basedir}/protected" />
        </exec>
    </target>

    <target name="phpcpd"
            description="Find duplicate code using PHPCPD and print human readable output. Intended for usage on the command line before committing.">
        <exec executable="${toolsdir}phpcpd">
            <arg path="${basedir}/protected" />
        </exec>
    </target>

    <target name="phpcpd-ci"
            depends="prepare"
            description="Find duplicate code using PHPCPD and log result in XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${toolsdir}phpcpd">
            <arg value="--log-pmd" />
            <arg path="${basedir}/build/logs/pmd-cpd.xml" />
            <arg path="${basedir}/protected" />
        </exec>
    </target>

    <target name="phpunit"
            depends="prepare,migrate,migrate-modules"
            description="Run unit tests with PHPUnit">
        <exec executable="${toolsdir}phpunit" failonerror="false">
            <arg value="--stop-on-failure"/>
            <arg value="--configuration"/>
            <arg path="${basedir}/protected/tests/phpunit_ci.xml"/>
        </exec>
    </target>

    <target name="mocha"
        depends="prepare,npm,bower"
        description="Run JS tests">
        <exec executable="grunt" failonerror="false">
            <arg value="test" />
            <arg value="--mode=headless"/>
        </exec>
    </target>

</project>